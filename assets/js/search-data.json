{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://cheevahagadog.github.io/fastblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post (testing)",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://cheevahagadog.github.io/fastblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Finding out which features contributed to each row's prediction",
            "content": "Almost completed with a machine learning project, I was asked by the client if I could include what the reasons where for each prediction. I had done feature importances before, but never was I asked to (or thought of) listing out what the reasons where behind each prediction made by my model. . Here, I’m going to explain how I approached that problem and what worked, and what I had to do. . Requirements . I recommend using a virtual environment. Here are the packages and the versions I’m using: . xgboost==0.7 (If pip install doesn’t work for you, these instructions worked the best for me) | iml==0.4.0 | scikit-learn==0.19.1 | shap==0.11.1 | pandas==0.21.1 | . Background . I had developed a customer churn prediction model using XGBoost 0.6. When they requested the prediction breakdown for each row, I searched the XGBoost documentation, I found that there was a parameter I could call called pred_contribs in the predict method. When called, it returned a matrix per each row and could be used for calculating the feature contributions that effected the prediction. . However, while running xgboost==0.6 the pred_contribs wasn’t showing up as an option. After updating to version 0.7 it was available. . Example from the SHAP package . Some searching led me to the amazing shap package which helps make machine learning models more visible, even at the row level. Here’s the example posted on their README: . import xgboost import shap # load JS visualization code to notebook shap.initjs() # train XGBoost model X,y = shap.datasets.boston() bst = xgboost.train({&quot;learning_rate&quot;: 0.1}, xgboost.DMatrix(X, label=y), 100) # explain the model&#39;s predictions using SHAP values (use pred_contrib in LightGBM) shap_values = bst.predict(xgboost.DMatrix(X), pred_contribs=True) # visualize the first prediction&#39;s explaination shap.force_plot(shap_values[0,:], X.iloc[0,:]) . Which yields this pretty visualization: . Awesome! This looked perfect for me…except my output needed to be in a CSV format. I didn’t need the pretty visualizations, I just needed something that an analyst could read and use if they needed to make a phone call to a potentially churning client and say “Hi I am calling because it looks like you haven’t had any X in over 6 months” or something to that effect. Something like this: . . Problem . I inspected the shap_values to realize it was a numpy matrix but it wasn’t obvious how to use it to get the effects of the features let alone know what the features were. And, for all its visual brilliance, the shap package unfortunately didn’t seem to have the ability to fetch the row-level prediction info into something more maleable, like a pandas DataFrame as shown above. . NOTE: Definitely checkout the library it has some amazing features that can help make your models more interpretable. . Solution . I attacked the problem by piecing apart the function that delivered the visualization I wanted in a pandas format, the force_plot function. I was hoping to catch some kind of data structure right before it was passed into a graphing function, and I was mostly right, but there were still some hurdles. My function below takes in the same parameters as the force_plot function from the SHAP package. I tweaked it to output the top five effects on the prediction, as seen below. . EDIT: it now takes the number of effects as an argument as well as if you want to sort the effects by absolute value or not. . def calculate_top_contributors(shap_values, features=None, feature_names=None, use_abs=False, return_df=False, n_features=5): &quot;&quot;&quot; Adapted from the SHAP package for visualizing the contributions of features towards a prediction. https://github.com/slundberg/shap Args: shap_values: np.array of floats features: pandas.core.series.Series, the data with the values feature_names: list, all the feature names/ column names use_abs: bool, if True, will sort the data by the absolute value of the feature effect return_df: bool, if True, will return a pandas dataframe, else will return a list of feature, effect, value n_features: int, the number of features to report on. If it equals -1 it will return the entire dataframe Returns: if return_df is True: returns a pandas dataframe if return_df is False: returns a flattened list by name, effect, and value &quot;&quot;&quot; assert not type(shap_values) == list, &quot;The shap_values arg looks looks multi output, try shap_values[i].&quot; assert len(shap_values.shape) == 1, &quot;Expected just one row. Please only submit one row at a time.&quot; shap_values = np.reshape(shap_values, (1, len(shap_values))) instance = iml.Instance(np.zeros((1, len(feature_names))), features) link = iml.links.convert_to_link(&#39;identity&#39;) # explanation obj expl = iml.explanations.AdditiveExplanation( shap_values[0, -1], # base value np.sum(shap_values[0, :]), # this row&#39;s prediction value shap_values[0, :-1], # matrix None, instance, # &lt;iml.common.Instance object &gt; link, # &#39;identity&#39; iml.Model(None, [&quot;output value&quot;]), # &lt;iml.common.Model object &gt; iml.datatypes.DenseData(np.zeros((1, len(feature_names))), list(feature_names)) ) # Get the name, effect and value for each feature, if there was an effect features_ = {} for i in range(len(expl.data.group_names)): if expl.effects[i] != 0: features_[i] = { &quot;effect&quot;: ensure_not_numpy(expl.effects[i]), &quot;value&quot;: ensure_not_numpy(expl.instance.group_display_values[i]), &quot;name&quot;: expl.data.group_names[i] } effect_df = pd.DataFrame([v for k, v in features_.items()]) if use_abs: # get the absolute value of effect effect_df[&#39;abs_effect&#39;] = effect_df[&#39;effect&#39;].apply(np.abs) effect_df.sort_values(&#39;abs_effect&#39;, ascending=False, inplace=True) else: effect_df.sort_values(&#39;effect&#39;, ascending=False, inplace=True) if not n_features == -1: effect_df = effect_df.head(n_features) if return_df: return effect_df.reset_index(drop=True) else: list_of_info = list(zip(effect_df.name, effect_df.effect, effect_df.value)) effect_list = list(sum(list_of_info, ())) # flattens the list of tuples return effect_list . This function is designed to be called for one row at a time and can be looped over to create the explanations for every prediction (see the full code example). Here it would return a list for the first row. . first_row_effects_list = calculate_top_contributors(shap_values=contribs[0, :], features=final_eval.iloc[0, :], feature_names=clf.feature_names) . Conclusion . The shap package should be in your toolbox if you are developing models with XGBoost. It is the perfect companion for a predictive power of the algorithm in delivering stunning and precise visualzations the make your work more transparent. If, like me, you need the information this package offers but in a more ‘dataish’ format, I have a simple function that you can use for each row prediction or call multiple times and create a separate dataset to join back to your original. The possibilities are endless! The full code sample is here. . Thanks for reading! .",
            "url": "https://cheevahagadog.github.io/fastblog/machine%20learning/2018/03/17/model-explanations.html",
            "relUrl": "/machine%20learning/2018/03/17/model-explanations.html",
            "date": " • Mar 17, 2018"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "Here I write about forays into data science and Python as well as other thoughts I have about life. .",
          "url": "https://cheevahagadog.github.io/fastblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://cheevahagadog.github.io/fastblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}